// DATABASE CONNECTION
datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// CLIENT GENERATOR
generator client {
   provider = "prisma-client-js"
}

// Enums
enum UserStatus {
   ACTIVE
   SUSPENDED
   BLOCKED
}

enum Gender {
   MALE
   FEMALE
}

enum LocationType {
   OFFICE
   MILL
   WAREHOUSE
}

enum UnitType {
   KG
   TON
   LTR
   PCS
}

enum ContractStatus {
   CREATED
   ACTIVE
   CANCELED
   CLOSED
}

enum OrderStatus {
   CREATED
   ONLOAD
   COMPLETED
}

enum VehicleType {
   COLD_DEASEL_D
   COLD_DEASEL
   TRONTON
   PICKUP
}

enum Transporter {
   SELLER
   BUYER
}

enum SupplierItemType {
   WEIGH
   REWEIGH
   OTHERS
}

// Core Models
model Location {
   id      String        @id @default(cuid())
   name    String
   key     String        @unique
   type    LocationType?
   address String

   users     User[]
   items     SupplierItem[]
   stocks    Stock[]
   contracts Contract[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model Stock {
   id           String  @id @default(cuid())
   locationId   String?
   itemId       String?
   remainingQty Float?

   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)

   @@unique([itemId, locationId])
}

model Item {
   id          String   @id @default(cuid())
   name        String
   description String?
   key         String   @unique
   unit        UnitType
   isWeighted  Boolean  @default(false)
   isSalable   Boolean  @default(false)

   supplierItems SupplierItem[]
   contracts     Contract[]
   stocks        Stock[]

   categories ItemCategory[] @relation("ItemCategories")

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model ItemCategory {
   id          String  @id @default(cuid())
   name        String
   key         String  @unique
   description String?

   items Item[] @relation("ItemCategories")

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

// Supplier Models
model Supplier {
   id      String         @id @default(cuid())
   name    String
   key     String         @unique
   address String?
   phone   String         @unique
   items   SupplierItem[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model SupplierItem {
   id             String           @id @default(cuid())
   supplierId     String?
   itemId         String?
   locationId     String?
   price          Int
   type           SupplierItemType @default(WEIGH)
   incomingScales IncomingScale[]

   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
   supplier Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([supplierId, itemId, locationId])
}

// Buyer Models
model Buyer {
   id        String     @id @default(cuid())
   name      String
   key       String     @unique
   tin       String     @unique
   address   String
   phone     String     @unique
   contracts Contract[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model Contract {
   id             String         @id @default(cuid())
   buyerId        String?
   itemId         String?
   locationId     String?
   status         ContractStatus @default(CREATED)
   contractNo     String
   price          Float
   vat            Float?
   totalQty       Int
   remainingQty   Int
   tolerance      Float?
   toleranceWeigh Int?
   terms          String?
   orders         Order[]

   buyer    Buyer?    @relation(fields: [buyerId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)
   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([buyerId, contractNo])
   @@index([buyerId, itemId])
}

model Order {
   id             String          @id @default(cuid())
   orderNo        String          @unique
   contractId     String?
   totalQty       Int
   remainingQty   Int
   status         OrderStatus     @default(CREATED)
   outgoingScales OutgoingScale[]

   contract Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model IncomingScale {
   id          String       @id @default(cuid())
   queueNo     String       @unique
   vehicleType VehicleType?
   itemId      String?
   price       Int
   driver      String
   plateNo     String
   licenseNo   String
   origin      String
   entryTime   DateTime     @default(now())
   exitTime    DateTime?
   weightIn    Int
   weightOut   Int?
   quality     Float?       @default(0)
   waybillNo   String?
   note        String?

   item SupplierItem? @relation(fields: [itemId], references: [id], onDelete: SetNull)

   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt
   locationId String?

   @@index([queueNo, plateNo, exitTime, itemId])
}

model OutgoingScale {
   id           String       @id @default(cuid())
   queueNo      String       @unique
   transporter  Transporter?
   orderId      String?
   splitOrderId String?      @unique
   driver       String
   plateNo      String
   licenseNo    String
   entryTime    DateTime     @default(now())
   exitTime     DateTime?
   weightIn     Int
   weightOut    Int?
   seal         String?
   poNo         String?
   sto          Float?
   so           Float?
   ffa          Float?
   moist        Float?
   broken       Float?
   dirty        Float?
   fiber        Float?
   note         String?

   splitOrder OutgoingScale? @relation("SplitRelation")
   mainOrder  OutgoingScale? @relation("SplitRelation", fields: [splitOrderId], references: [id], onDelete: SetNull)

   order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([queueNo, orderId, splitOrderId])
}

// User Model
model User {
   id             String          @id @default(cuid())
   roleId         String?
   locationId     String?
   name           String?
   gender         Gender?
   status         UserStatus      @default(SUSPENDED)
   email          String?         @unique
   emailVerified  DateTime?
   image          String?
   password       String?
   accounts       Account[]
   sessions       Session[]
   authenticators Authenticator[]

   role     Role?     @relation(fields: [roleId], references: [id], onDelete: SetDefault)
   location Location? @relation(fields: [locationId], references: [id], onDelete: SetDefault)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([roleId, locationId])
}

model Role {
   id          String           @id @default(cuid())
   name        String
   key         String           @unique
   description String?
   users       User[]
   permissions RolePermission[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model Permission {
   id          String           @id @default(cuid())
   name        String
   key         String           @unique
   description String?
   roles       RolePermission[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model RolePermission {
   id           String  @id @default(cuid())
   roleId       String?
   permissionId String?

   role       Role?       @relation(fields: [roleId], references: [id], onDelete: SetNull)
   permission Permission? @relation(fields: [permissionId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([roleId, permissionId])
   @@index([roleId, permissionId])
}

model Account {
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String?
   access_token      String?
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String?
   session_state     String?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([provider, providerAccountId])
}

model Session {
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model VerificationToken {
   identifier String
   token      String
   expires    DateTime

   @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
   credentialID         String  @unique
   userId               String
   providerAccountId    String
   credentialPublicKey  String
   counter              Int
   credentialDeviceType String
   credentialBackedUp   Boolean
   transports           String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([userId, credentialID])
}
