// DATABASE CONNECTION
datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// CLIENT GENERATOR
generator client {
   provider = "prisma-client-js"
}

// Enums
enum UserStatus {
   ACTIVE
   SUSPENDED
   BLOCKED
}

enum Gender {
   MALE
   FEMALE
}

enum LocationType {
   OFFICE
   MILL
   WAREHOUSE
}

enum UnitType {
   KG
   TON
   LTR
   PCS
}

enum ContractStatus {
   CREATED
   APPROVED
   ACTIVE
   EXPIRED
   CANCELED
   COMPLETED
}

enum OrderStatus {
   CREATED
   LOADING
   CANCELED
   COMPLETED
}

enum TransactionType {
   DEBIT
   CREDIT
}

enum IncomingScaleType {
   WEIGH
   REWEIGH
   OTHERS
}

// Core Models
model Location {
   id      String        @id @default(cuid())
   name    String
   key     String        @unique
   type    LocationType?
   address String

   users          User[]
   items          SupplierItem[]
   stocks         Stock[]
   transactions   Transaction[]
   contracts      Contract[]
   incomingScales IncomingScale[]
   outgoingScales OutgoingScale[]
   transporters   Transporter[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model Stock {
   id           String  @id @default(cuid())
   locationId   String?
   itemId       String?
   remainingQty Float?

   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)

   @@unique([itemId, locationId])
}

model Item {
   id          String   @id @default(cuid())
   typeId      String?
   name        String
   description String?
   key         String   @unique
   unit        UnitType
   isWeighted  Boolean  @default(false)
   isSalable   Boolean  @default(false)

   supplierItems SupplierItem[]
   contracts     Contract[]
   stocks        Stock[]

   itemType ItemType? @relation(fields: [typeId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model ItemType {
   id          String  @id @default(cuid())
   name        String
   key         String  @unique
   description String?

   items Item[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

// Supplier Models
model Supplier {
   id      String         @id @default(cuid())
   name    String
   key     String         @unique
   address String?
   phone   String         @unique
   items   SupplierItem[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model SupplierItem {
   id             String          @id @default(cuid())
   supplierId     String?
   itemId         String?
   locationId     String?
   priceHistories PriceHistory[]
   incomingScales IncomingScale[]

   supplier Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)
   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([supplierId, itemId, locationId])
}

model PriceHistory {
   id             String          @id @default(cuid())
   itemId         String?
   price          Float
   validFrom      DateTime        @default(now())
   validTo        DateTime?
   incomingScales IncomingScale[]

   item SupplierItem? @relation(fields: [itemId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

// Buyer Models
model Buyer {
   id        String     @id @default(cuid())
   name      String
   key       String     @unique
   tin       String     @unique
   address   String
   phone     String     @unique
   contracts Contract[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Contract {
   id             String         @id @default(cuid())
   buyerId        String?
   itemId         String?
   locationId     String?
   status         ContractStatus @default(CREATED)
   contractNo     String
   unitPrice      Float
   vat            Float?
   totalQty       Int
   remainingQty   Int
   tolerance      Float?
   toleranceWeigh Int?
   terms          String?
   startDate      DateTime       @default(now())
   endDate        DateTime?
   orders         Order[]

   buyer    Buyer?    @relation(fields: [buyerId], references: [id], onDelete: SetNull)
   item     Item?     @relation(fields: [itemId], references: [id], onDelete: SetNull)
   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([buyerId, contractNo])
   @@index([buyerId, itemId])
}

model Order {
   id             String          @id @default(cuid())
   orderNo        String          @unique
   contractId     String?
   totalQty       Int
   remainingQty   Int
   status         OrderStatus     @default(CREATED)
   outgoingScales OutgoingScale[]

   contract Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model VehicleType {
   id             String          @id @default(cuid())
   name           String
   key            String          @unique
   description    String?
   incomingScales IncomingScale[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Transporter {
   id             String          @id @default(cuid())
   locationId     String?
   name           String
   key            String          @unique
   phone          String?         @unique
   address        String?
   outgoingScales OutgoingScale[]

   location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model IncomingScale {
   id            String            @id @default(cuid())
   queueNo       Int               @unique @default(autoincrement())
   locationId    String?
   operatorId    String?
   vehicleTypeId String?
   itemId        String?
   priceId       String?
   driver        String
   plateNo       String
   licenseNo     String
   origin        String
   entryTime     DateTime          @default(now())
   exitTime      DateTime?
   weightIn      Int
   weightOut     Int?
   type          IncomingScaleType @default(WEIGH)
   sorting       Float?            @default(0)
   oer           Float?            @default(0)
   waybillNo     String?
   note          String?

   operator User?         @relation(fields: [operatorId], references: [id], onDelete: SetNull)
   item     SupplierItem? @relation(fields: [itemId], references: [id], onDelete: SetNull)
   price    PriceHistory? @relation(fields: [priceId], references: [id], onDelete: SetNull)
   vehicle  VehicleType?  @relation(fields: [vehicleTypeId], references: [id], onDelete: SetNull)
   location Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([locationId, operatorId, queueNo, plateNo, exitTime, itemId])
}

model OutgoingScale {
   id            String    @id @default(cuid())
   queueNo       Int       @unique @default(autoincrement())
   locationId    String?
   operatorId    String?
   transporterId String?
   orderId       String?
   splitOrderNo  String?
   driver        String
   plateNo       String
   licenseNo     String
   entryTime     DateTime  @default(now())
   exitTime      DateTime?
   weightIn      Int
   weightOut     Int?
   sealStartNo   String?
   sealEndNo     String?
   poNo          String?
   sto           Float?
   so            Float?
   ffa           Float?
   moist         Float?
   broken        Float?
   dirty         Float?
   fiber         Float?
   note          String?

   order       Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
   operator    User?        @relation(fields: [operatorId], references: [id], onDelete: SetNull)
   location    Location?    @relation(fields: [locationId], references: [id], onDelete: SetNull)
   transporter Transporter? @relation(fields: [transporterId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([operatorId, queueNo, plateNo, exitTime])
}

// Transaction Model
model TransactionCategory {
   id          String  @id @default(cuid())
   name        String  @unique
   description String?

   transactions Transaction[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Transaction {
   id              String          @id @default(cuid())
   transactionNo   String?         @unique
   locationId      String?
   categoryId      String?
   transactionType TransactionType
   amount          Float
   description     String?
   transactionDate DateTime        @default(now())

   location Location?            @relation(fields: [locationId], references: [id], onDelete: SetNull)
   category TransactionCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([transactionType, categoryId, locationId])
}

// User Model
model User {
   id             String          @id @default(cuid())
   roleId         String?
   locationId     String?
   name           String?
   gender         Gender?
   status         UserStatus      @default(SUSPENDED)
   email          String?         @unique
   emailVerified  DateTime?
   image          String?
   password       String?
   accounts       Account[]
   sessions       Session[]
   authenticators Authenticator[]
   incomingScales IncomingScale[]
   outgoingScales OutgoingScale[]

   role     Role?     @relation(fields: [roleId], references: [id], onDelete: SetDefault)
   location Location? @relation(fields: [locationId], references: [id], onDelete: SetDefault)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Role {
   id          String           @id @default(cuid())
   name        String
   key         String           @unique
   description String?
   users       User[]
   permissions RolePermission[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([key])
}

model Permission {
   id          String           @id @default(cuid())
   name        String
   key         String           @unique
   description String?
   roles       RolePermission[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model RolePermission {
   id           String  @id @default(cuid())
   roleId       String?
   permissionId String?

   role       Role?       @relation(fields: [roleId], references: [id], onDelete: SetNull)
   permission Permission? @relation(fields: [permissionId], references: [id], onDelete: SetNull)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@unique([roleId, permissionId]) // Prevent duplicate Role-Permission pairs
   @@index([roleId, permissionId]) // Optimize join queries
}

model Account {
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String?
   access_token      String?
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String?
   session_state     String?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([provider, providerAccountId])
}

model Session {
   sessionToken String   @unique
   userId       String
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model VerificationToken {
   identifier String
   token      String
   expires    DateTime

   @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
   credentialID         String  @unique
   userId               String
   providerAccountId    String
   credentialPublicKey  String
   counter              Int
   credentialDeviceType String
   credentialBackedUp   Boolean
   transports           String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@id([userId, credentialID])
}
